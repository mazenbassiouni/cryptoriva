<?php// +----------------------------------------------------------------------// | ThinkPHP [ WE CAN DO IT JUST THINK IT ]// +----------------------------------------------------------------------// | Copyright (c) 2006-2014 http://thinkphp.cn All rights reserved.// +----------------------------------------------------------------------// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )// +----------------------------------------------------------------------// | Author: support@codono.com// +----------------------------------------------------------------------namespace Think;/** * ForThinkPHPAutomatic generation */class Build{    static protected $controller = '<?phpnamespace [MODULE]\Controller;use Think\Controller;class [CONTROLLER]Controller extends Controller {    public function index(){        $this->show(\'Welcome to codono.com\',\'utf-8\');    }}';    static protected $model = '<?phpnamespace [MODULE]\Model;use Think\Model;class [MODEL]Model extends Model {}';    // DetectApplication Directory whether need automatic create    static public function checkDir($module)    {        if (!is_dir(APP_PATH . $module)) {            // Create a directory structure of the module            self::buildAppDir($module);        } elseif (!is_dir(LOG_PATH)) {            // an examinationCachetable of Contents            self::buildRuntime();        }    }    // createapplicationwithModuleoftable of Contentsstructure    static public function buildAppDir($module)    {        // Nocreateofwordsautomaticcreate        if (!is_dir(APP_PATH)) mkdir(APP_PATH, 0755, true);        if (is_writeable(APP_PATH)) {            $dirs = array(                COMMON_PATH,                COMMON_PATH . 'Common/',                CONF_PATH,                APP_PATH . $module . '/',                APP_PATH . $module . '/Common/',                APP_PATH . $module . '/Controller/',                APP_PATH . $module . '/Model/',                APP_PATH . $module . '/Conf/',                APP_PATH . $module . '/View/',                RUNTIME_PATH,                CACHE_PATH,                CACHE_PATH . $module . '/',                LOG_PATH,                LOG_PATH . $module . '/',                TEMP_PATH,                DATA_PATH,            );            foreach ($dirs as $dir) {                if (!is_dir($dir)) mkdir($dir, 0755, true);            }            // Writetable of ContentsSafetyfile            self::buildDirSecure($dirs);            // Written application configuration file            if (!is_file(CONF_PATH . 'config' . CONF_EXT))                file_put_contents(CONF_PATH . 'config' . CONF_EXT, '.php' == CONF_EXT ? "<?php\nreturn array(\n\t//'Configuration Item'=>'Configuration values'\n);" : '');            // Write module configuration file            if (!is_file(APP_PATH . $module . '/Conf/config' . CONF_EXT))                file_put_contents(APP_PATH . $module . '/Conf/config' . CONF_EXT, '.php' == CONF_EXT ? "<?php\nreturn array(\n\t//'Configuration Item'=>'Configuration values'\n);" : '');            // FormModuleoftestController            if (defined('BUILD_CONTROLLER_LIST')) {                // Automatic generatedofControllerList(noteCase)                $list = explode(',', BUILD_CONTROLLER_LIST);                foreach ($list as $controller) {                    self::buildController($module, $controller);                }            } else {                // Generate default controller                self::buildController($module);            }            // Model generation module            if (defined('BUILD_MODEL_LIST')) {                // Automatic generatedofControllerList(noteCase)                $list = explode(',', BUILD_MODEL_LIST);                foreach ($list as $model) {                    self::buildModel($module, $model);                }            }        } else {            header('Content-Type:text/html; charset=utf-8');            exit('Application Directory[' . APP_PATH . ']Can notwrite,table of ContentsUnableAutomatic generated!<BR>pleaseManuallyFormprojecttable of Contents~');        }    }    // an examinationCachetable of Contents(Runtime) in casedoes not existthenautomaticcreate    static public function buildRuntime()    {        if (!is_dir(RUNTIME_PATH)) {            mkdir(RUNTIME_PATH);        } elseif (!is_writeable(RUNTIME_PATH)) {            header('Content-Type:text/html; charset=utf-8');            exit('table of Contents [ ' . RUNTIME_PATH . ' ] Can not write!');        }        mkdir(CACHE_PATH);  // templateCachetable of Contents        if (!is_dir(LOG_PATH)) mkdir(LOG_PATH);    // Journaltable of Contents        if (!is_dir(TEMP_PATH)) mkdir(TEMP_PATH);   // dataCachetable of Contents        if (!is_dir(DATA_PATH)) mkdir(DATA_PATH);   // dataFile Directory        return true;    }    // Create a controller class    static public function buildController($module, $controller = 'Index')    {        $file = APP_PATH . $module . '/Controller/' . $controller . 'Controller' . EXT;        if (!is_file($file)) {            $content = str_replace(array('[MODULE]', '[CONTROLLER]'), array($module, $controller), self::$controller);            if (!C('APP_USE_NAMESPACE')) {                $content = preg_replace('/namespace\s(.*?);/', '', $content, 1);            }            $dir = dirname($file);            if (!is_dir($dir)) {                mkdir($dir, 0755, true);            }            file_put_contents($file, $content);        }    }    // Create a model class    static public function buildModel($module, $model)    {        $file = APP_PATH . $module . '/Model/' . $model . 'Model' . EXT;        if (!is_file($file)) {            $content = str_replace(array('[MODULE]', '[MODEL]'), array($module, $model), self::$model);            if (!C('APP_USE_NAMESPACE')) {                $content = preg_replace('/namespace\s(.*?);/', '', $content, 1);            }            $dir = dirname($file);            if (!is_dir($dir)) {                mkdir($dir, 0755, true);            }            file_put_contents($file, $content);        }    }    // Formtable of ContentsSafetyfile    static public function buildDirSecure($dirs = array())    {        // Directory Security write(defaultOpen)        defined('BUILD_DIR_SECURE') or define('BUILD_DIR_SECURE', true);        if (BUILD_DIR_SECURE) {            defined('DIR_SECURE_FILENAME') or define('DIR_SECURE_FILENAME', 'index.html');            defined('DIR_SECURE_CONTENT') or define('DIR_SECURE_CONTENT', ' ');            // automaticWritetable of ContentsSafetyfile            $content = DIR_SECURE_CONTENT;            $files = explode(',', DIR_SECURE_FILENAME);            foreach ($files as $filename) {                foreach ($dirs as $dir)                    file_put_contents($dir . $filename, $content);            }        }    }}